Queue

Basic Operations on Queue:
enqueue(): Inserts an element at the end of the QueueDS i.e. at the rear end.
dequeue(): This operation removes and returns an element that is at the front end of the QueueDS.
front(): This operation returns the element at the front end without removing it.
rear(): This operation returns the element at the rear end without removing it.
Empty(): This operation indicates whether the QueueDS is empty or not.
size(): This operation returns the size of the QueueDS i.e. the total number of elements it contains.

TYPES OF QUEUE

Simple Queue: Simple QueueDS also known as a linear QueueDS is the most basic version of a QueueDS.
Here, insertion of an element i.e. the Enqueue operation takes place at the rear end and removal of an element i.e.
the Dequeue operation takes place at the front end.

Circular Queue:  In a circular QueueDS, the element of the QueueDS act as a circular ring.
The working of a circular QueueDS is similar to the linear QueueDS except for the fact that the last element is connected to the
first element. Its advantage is that the memory is utilized in a better way. This is because if there is an empty space i.e.
if no element is present at a certain position in the QueueDS, then an element can be easily added at that position.

Priority Queue: This QueueDS is a special type of QueueDS. Its specialty is that it arranges the elements in a QueueDS based on some
priority. The priority can be something where the element with the highest value has the priority
so it creates a QueueDS with decreasing order of values. The priority can also be such
that the element with the lowest value gets the highest priority so in turn it creates a QueueDS with increasing order of values.

Dequeue: Dequeue is also known as Double Ended Queue. As the name suggests double ended,
it means that an element can be inserted or removed from both ends of the QueueDS,
unlike the other queues in which it can be done only from one end.
Because of this property, it may not obey the First In First Out property.